// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 72999ebd2f
// Version Date: Wed Mar 17 08:36:51 UTC 2021

// Package grpc provides a gRPC client for the Authentication service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "authentication"
	"authentication/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.AuthenticationServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var registerEndpoint endpoint.Endpoint
	{
		registerEndpoint = grpctransport.NewClient(
			conn,
			"authentication.Authentication",
			"Register",
			EncodeGRPCRegisterRequest,
			DecodeGRPCRegisterResponse,
			pb.RegisterResponse{},
			clientOptions...,
		).Endpoint()
	}

	var signinEndpoint endpoint.Endpoint
	{
		signinEndpoint = grpctransport.NewClient(
			conn,
			"authentication.Authentication",
			"SignIn",
			EncodeGRPCSignInRequest,
			DecodeGRPCSignInResponse,
			pb.SignInResponse{},
			clientOptions...,
		).Endpoint()
	}

	var signoutEndpoint endpoint.Endpoint
	{
		signoutEndpoint = grpctransport.NewClient(
			conn,
			"authentication.Authentication",
			"SignOut",
			EncodeGRPCSignOutRequest,
			DecodeGRPCSignOutResponse,
			pb.SignOutResponse{},
			clientOptions...,
		).Endpoint()
	}

	var refreshEndpoint endpoint.Endpoint
	{
		refreshEndpoint = grpctransport.NewClient(
			conn,
			"authentication.Authentication",
			"Refresh",
			EncodeGRPCRefreshRequest,
			DecodeGRPCRefreshResponse,
			pb.RefreshResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getpermissionsEndpoint endpoint.Endpoint
	{
		getpermissionsEndpoint = grpctransport.NewClient(
			conn,
			"authentication.Authentication",
			"GetPermissions",
			EncodeGRPCGetPermissionsRequest,
			DecodeGRPCGetPermissionsResponse,
			pb.GetPermissionsResponse{},
			clientOptions...,
		).Endpoint()
	}

	endpoints := svc.NewEndpoints()
	endpoints.RegisterEndpoint = registerEndpoint
	endpoints.SignInEndpoint = signinEndpoint
	endpoints.SignOutEndpoint = signoutEndpoint
	endpoints.RefreshEndpoint = refreshEndpoint
	endpoints.GetPermissionsEndpoint = getpermissionsEndpoint

	return endpoints, nil
}

// GRPC Client Decode

// DecodeGRPCRegisterResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC register reply to a user-domain register response. Primarily useful in a client.
func DecodeGRPCRegisterResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.RegisterResponse)
	return reply, nil
}

// DecodeGRPCSignInResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC signin reply to a user-domain signin response. Primarily useful in a client.
func DecodeGRPCSignInResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SignInResponse)
	return reply, nil
}

// DecodeGRPCSignOutResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC signout reply to a user-domain signout response. Primarily useful in a client.
func DecodeGRPCSignOutResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SignOutResponse)
	return reply, nil
}

// DecodeGRPCRefreshResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC refresh reply to a user-domain refresh response. Primarily useful in a client.
func DecodeGRPCRefreshResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.RefreshResponse)
	return reply, nil
}

// DecodeGRPCGetPermissionsResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getpermissions reply to a user-domain getpermissions response. Primarily useful in a client.
func DecodeGRPCGetPermissionsResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetPermissionsResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCRegisterRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain register request to a gRPC register request. Primarily useful in a client.
func EncodeGRPCRegisterRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.RegisterRequest)
	return req, nil
}

// EncodeGRPCSignInRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain signin request to a gRPC signin request. Primarily useful in a client.
func EncodeGRPCSignInRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SignInRequest)
	return req, nil
}

// EncodeGRPCSignOutRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain signout request to a gRPC signout request. Primarily useful in a client.
func EncodeGRPCSignOutRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SignOutRequest)
	return req, nil
}

// EncodeGRPCRefreshRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain refresh request to a gRPC refresh request. Primarily useful in a client.
func EncodeGRPCRefreshRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.RefreshRequest)
	return req, nil
}

// EncodeGRPCGetPermissionsRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getpermissions request to a gRPC getpermissions request. Primarily useful in a client.
func EncodeGRPCGetPermissionsRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetPermissionsRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
