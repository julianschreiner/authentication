// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 72999ebd2f
// Version Date: Wed Mar 17 08:36:51 UTC 2021

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "authentication"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC AuthenticationServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.AuthenticationServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// authentication

		signin: grpctransport.NewServer(
			endpoints.SignInEndpoint,
			DecodeGRPCSignInRequest,
			EncodeGRPCSignInResponse,
			serverOptions...,
		),
		signout: grpctransport.NewServer(
			endpoints.SignOutEndpoint,
			DecodeGRPCSignOutRequest,
			EncodeGRPCSignOutResponse,
			serverOptions...,
		),
		refresh: grpctransport.NewServer(
			endpoints.RefreshEndpoint,
			DecodeGRPCRefreshRequest,
			EncodeGRPCRefreshResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the AuthenticationServer interface
type grpcServer struct {
	signin  grpctransport.Handler
	signout grpctransport.Handler
	refresh grpctransport.Handler
}

// Methods for grpcServer to implement AuthenticationServer interface

func (s *grpcServer) SignIn(ctx context.Context, req *pb.SignInRequest) (*pb.SignInResponse, error) {
	_, rep, err := s.signin.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.SignInResponse), nil
}

func (s *grpcServer) SignOut(ctx context.Context, req *pb.SignOutRequest) (*pb.SignOutResponse, error) {
	_, rep, err := s.signout.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.SignOutResponse), nil
}

func (s *grpcServer) Refresh(ctx context.Context, req *pb.RefreshRequest) (*pb.RefreshResponse, error) {
	_, rep, err := s.refresh.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.RefreshResponse), nil
}

// Server Decode

// DecodeGRPCSignInRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC signin request to a user-domain signin request. Primarily useful in a server.
func DecodeGRPCSignInRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SignInRequest)
	return req, nil
}

// DecodeGRPCSignOutRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC signout request to a user-domain signout request. Primarily useful in a server.
func DecodeGRPCSignOutRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SignOutRequest)
	return req, nil
}

// DecodeGRPCRefreshRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC refresh request to a user-domain refresh request. Primarily useful in a server.
func DecodeGRPCRefreshRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.RefreshRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCSignInResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain signin response to a gRPC signin reply. Primarily useful in a server.
func EncodeGRPCSignInResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.SignInResponse)
	return resp, nil
}

// EncodeGRPCSignOutResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain signout response to a gRPC signout reply. Primarily useful in a server.
func EncodeGRPCSignOutResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.SignOutResponse)
	return resp, nil
}

// EncodeGRPCRefreshResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain refresh response to a gRPC refresh reply. Primarily useful in a server.
func EncodeGRPCRefreshResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.RefreshResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
